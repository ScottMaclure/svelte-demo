{
  "version": 3,
  "file": "main.css",
  "sources": [
    "..\\src\\HelloWorld.html",
    "..\\src\\Filters.html"
  ],
  "sourcesContent": [
    "<div class=\"helloWorld\">\n\n  <RouterLink to=\"/\">Splash</RouterLink>\n  <RouterLink to=\"/ListUsers\">List Users</RouterLink>\n\n  <div id=\"content\"></div>\n\n</div>\n\n<script>\n  import SvelteRouter from '../vendors/svelte-router/src/index.js'\n  import Splash from './Splash.html'\n  import ListUsers from './ListUsers.html'\n\n  const { createRouter, RouterLink } = SvelteRouter\n\n  const router = createRouter({\n    '/': Splash,\n    '/ListUsers': ListUsers\n  })\n\n  export default {\n    components: {\n      RouterLink,\n      Splash,\n      ListUsers\n    },\n    oncreate () {\n      router.create('#content')\n    },\n    ondestroy () {\n      router.destroy()\n    },\n    data () {\n      return {\n        isLoading: false,\n        count: 0,\n        items: []\n      }\n    },\n    methods: {\n        doInc: function (count) {\n            // TODO emit semantic event and get index.html to update localStorage, so the component knows nothing!\n            window.localStorage.count = parseInt(count, 10) + 1\n            this.set({ count: window.localStorage.count })\n        },\n        requestData: function () {\n          // TODO isLoading... localise to Users component?\n          this.set({ isLoading: true })\n          this.fire('requestData')\n        },\n        setData: function (data) {\n          data.isLoading = false\n          data.originalItems = data.items.slice() // make a shallow copy for filtering etc.\n          this.set(data)\n        }\n    }\n  }\n</script>\n<style>\n  .helloWorld {\n    background-color: var(--base-background-color, #00f);\n    padding-bottom: var(--spacing-horizontal-normal);\n  }\n  .router-link-active {\n    color: red;\n  }\n</style>",
    "<div class=\"filters\">\r\n    <label for=\"filter\">Filter:</label>\r\n    <input type=\"text\" id=\"filter\" name=\"filter\" on:keyup='possibleFilter(event)'/>\r\n</div>\r\n<script>\r\n    const FILTER_WAIT = 250\r\n\r\n    var timer;\r\n\r\n    export default {\r\n        methods: {\r\n            /**\r\n             * Only fire after a certain number of characters have been typed.\r\n             * Wait before firing the event, to debounce.\r\n             */\r\n            possibleFilter: function (event) {\r\n                var self = this\r\n\r\n                window.clearTimeout(timer)\r\n\r\n                let filterValue = event.target.value.trim();\r\n\r\n                // TODO MIN_FILTER_LENGTH check here, but how to handle delete actions?\r\n\r\n                timer = setTimeout(function () {\r\n                    self.fire('filterData', { filter: filterValue })\r\n                }, FILTER_WAIT);\r\n\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n    .filters {\r\n        margin: var(--spacing-horizontal-normal) 0;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA2DO;EACL,+DAAW,CAAC;IACV,iBAAiB,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC;IACpD,eAAe,CAAC,IAAI,2BAA2B,CAAC;GACjD;EACD,+EAAmB,CAAC;IAClB,MAAM,CAAC,GAAG;GACX;AACH;ACnCO;IACH,yDAAQ,CAAC;QACL,OAAO,CAAC,IAAI,2BAA2B,CAAC,CAAC,CAAC;KAC7C;AACL"
}