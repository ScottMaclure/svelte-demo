{
  "version": 3,
  "file": "main.css",
  "sources": [
    "..\\src\\SvelteDemoApp.html",
    "..\\src\\Filters.html"
  ],
  "sourcesContent": [
    "<:Window on:popstate='doPopState(event)'/>\n\n<div class=\"helloWorld\">\n\n  <div class=\"navLinks\">\n    <a href=\"#{{routes.splash}}\" on:click='doRoute(event, { route: routes.splash})'>Home</a>\n    <a href=\"#{{routes.listUsers}}\" on:click='doRoute(event, { route: routes.listUsers })'>List Users</a>\n    <a href=\"#{{routes.testBroken}}\" on:click='doRoute(event, { route: routes.testBroken })'>Test Broken</a>\n  </div>\n\n  {{#if route === routes.splash}}\n\n    <Splash name='{{name}}' count='{{count}}'/>\n\n  {{elseif route === routes.listUsers}}\n\n    <ListUsers\n      isLoading='{{isLoading}}'\n      items='{{items}}'\n      on:filterData='fire(\"filterData\", event)'\n      on:requestData='requestData()'\n      on:deleteItem='fire(\"deleteItem\", event)'\n    />\n\n  {{else}}\n\n    <p>No route found for '{{route}}'</p>\n\n  {{/if}}\n\n</div>\n\n<script>\n  import Config from './config.js'\n  import Splash from './Splash.html'\n  import ListUsers from './ListUsers.html'\n\n  export default {\n    components: {\n      Config,\n      Splash,\n      ListUsers\n    },\n    data () {\n      return {\n        route: Config.routes.default,\n        routes: Config.routes,\n        isLoading: false,\n        count: 0,\n        items: []\n      }\n    },\n    methods: {\n        doRoute: function (event, data) {\n          event.preventDefault()\n          window.history.pushState(data, data.route, event.originalTarget.getAttribute('href'))\n          this.set({ route: data.route })\n        },\n        doPopState: function (event) {\n          // TODO Repeated code from main.js.\n          let currentRoute = window.location.hash.slice(1) || Config.routes.default\n          this.set({ route: currentRoute })\n        },\n        requestData: function () {\n          // TODO isLoading... localise to Users component?\n          this.set({ isLoading: true })\n          this.fire('requestData')\n        },\n        setData: function (data) {\n          data.isLoading = false\n          data.originalItems = data.items.slice() // make a shallow copy for filtering etc.\n          this.set(data)\n        }\n    }\n  }\n</script>\n<style>\n  .helloWorld {\n    background-color: var(--base-background-color, #00f);\n    padding: var(--spacing-vertical-normal);\n  }\n  .navLinks a {\n    margin-right: var(--spacing-horizontal-small);\n  }\n</style>",
    "<div class=\"filters\">\n    <label for=\"filter\">Filter:</label>\n    <input type=\"text\" id=\"filter\" name=\"filter\" on:keyup='possibleFilter(event)'/>\n</div>\n<script>\n    const FILTER_WAIT = 250\n\n    var timer;\n\n    export default {\n        methods: {\n            /**\n             * Only fire after a certain number of characters have been typed.\n             * Wait before firing the event, to debounce.\n             */\n            possibleFilter: function (event) {\n                var self = this\n\n                window.clearTimeout(timer)\n\n                let filterValue = event.target.value.trim();\n\n                // TODO MIN_FILTER_LENGTH check here, but how to handle delete actions?\n\n                timer = setTimeout(function () {\n                    self.fire('filterData', { filter: filterValue })\n                }, FILTER_WAIT);\n\n            }\n        }\n    }\n</script>\n<style>\n    .filters {\n        margin: var(--spacing-vertical-normal) 0;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA4EO;EACL,+DAAW,CAAC;IACV,iBAAiB,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC;IACpD,QAAQ,CAAC,IAAI,yBAAyB,CAAC;GACxC;EACD,+DAAW,CAAC;IACV,aAAa,CAAC,IAAI,0BAA0B,CAAC;GAC9C;AACH;ACpDO;IACH,yDAAQ,CAAC;QACL,OAAO,CAAC,IAAI,yBAAyB,CAAC,CAAC,CAAC;KAC3C;AACL"
}